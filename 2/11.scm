(define (make-interval a b) (cons a b))

(define (upper-bound x) (cdr x))

(define (lower-bound x) (car x))

(define (mul-interval x y)
  (let* ((x-up (upper-bound x))
         (x-lo (lower-bound x))
         (y-up (upper-bound y))
         (y-lo (lower-bound y))
         (x-sign (cond ((and (< x-lo 0) (< x-up 0)) -1)
                       ((and (<= x-lo 0) (>= x-up 0)) 0)
                       (else 1)))
         (y-sign (cond ((and (< y-lo 0) (< y-up 0)) -1)
                       ((and (<= y-lo 0) (>= y-up 0)) 0)
                       (else 1))))
    (cond ((< x-sign 0)
           (cond ((< y-sign 0) ; (- -) * (- -)
                  (make-interval (* x-up y-up) 
                                 (* x-lo y-lo)))
                 ((= y-sign 0) ; (- -) * (- +)
                  (make-interval (* x-lo y-up) 
                                 (* x-lo y-lo)))
                 (else         ; (- -) * (+ +)
                  (make-interval (* x-lo y-up) 
                                 (* x-up y-lo)))))
          ((= x-sign 0)
           (cond ((< y-sign 0) ; (- +) * (- -)
                  (make-interval (* x-up y-lo) 
                                 (* x-lo y-lo))) 
                 ((= y-sign 0) ; (- +) * (- +)
                  (make-interval (min (* x-up y-lo) (* x-lo y-up))
                                 (max (* x-lo y-lo) (* x-up y-up))))
                 (else         ; (- +) * (+ +)
                  (make-interval (* x-lo y-up)
                                 (* x-up y-up)))))
          (else ; x: (+ +)
           (cond ((< y-sign 0) ; (+ +) * (- -)
                  (make-interval (* x-up y-lo) 
                                 (* x-lo y-up)))
                 ((= y-sign 0) ; (+ +) * (- +)
                  (make-interval (* x-up y-lo)
                                 (* x-up y-up)))
                 (else         ; (+ +) * (+ +)
                  (make-interval (* x-lo y-lo)
                                 (* x-up y-up))))))))
